@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    //Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="container page product-details-page">
    <div class="row">
        <div class="col">
            <h1 class="product-name">@Model.Name</h1>
        </div>
    </div>
    <div class="row hr">
        <div class="col">
            <ul class="list-inline">
                <li class="list-inline-item"><i class="fas fa-tags"></i> @Model.Breadcrumb.CategoryBreadcrumb.LastOrDefault().Name</li>
                @if (Model.ShowSku && !string.IsNullOrEmpty(Model.Sku))
                {
                    <li class="list-inline-item">|</li>
                    <li class="list-inline-item">
                        <span>SKU: #@Model.Sku</span>
                    </li>
                }
            </ul>
        </div>
        <div class="col">
            @await Html.PartialAsync("_ShareButton", Model)
        </div>
    </div>
    <div class="row page-body">
        <form asp-route="Product" class="container" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div class="row">
                <div class="col-12 col-md-5">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })

                    @if (seoSettings.MicrodataEnabled)
                    {
                        @await Html.PartialAsync("_Microdata", Model)
                    }
                    @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
                </div>
                <div class="col-12 col-md-4">                    
                    <div data-productid="@Model.Id">
                        <div class="row hr pb-4 pt-4">
                            <div class="col">
                                <!--price & add to cart & estimate shipping-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                }
                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                                }
                            </div>
                        </div>
                        <div class="row hr pb-4 pt-4">
                            <div class="col">
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";

                                    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";

                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                    @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                                }
                            </div>
                        </div>
                        <div class="row hr pb-4 pt-4">
                            <div class="col product-essential">
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                                <!--product pictures-->

                                <div class="overview">
                                    @await Html.PartialAsync("_Discontinued", Model)

                                    @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                    {
                                        <div class="short-description">
                                            @Html.Raw(Model.ShortDescription)
                                        </div>
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                    <!--availability-->
                                    @await Html.PartialAsync("_Availability", Model)
                                    <!--SKU, MAN, GTIN, vendor-->
                                    @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                    <!--delivery-->
                                    @await Html.PartialAsync("_DeliveryInfo", Model)
                                    <!--sample download-->
                                    @await Html.PartialAsync("_DownloadSample", Model)

                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                                </div>
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                    <div class="full-description">
                                        @Html.Raw(Model.FullDescription)
                                    </div>
                                }
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })                            
                            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                        </div>
                        <div class="row hr pb-4 pt-4">
                            <div class="product-collateral col">
                                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                            </div>
                        </div>
                        <div class="col row pb-4 pt-4">
                            <div class="col">
                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                            </div>
                        </div>
                    </div>
                    
                </div>
                <div class="col">
                    <div class="row">
                        <div class="col pt-4">
                            <div class="p-4 border rounded bg-gray">
                                <div class="hr mb-4">
                                    <div class="media">
                                        <img src="~/Themes/MeatyChopShop/Content/images/icon/icon_giao_hang_1.svg" class="mr-3" alt="...">
                                        <div class="media-body">
                                            <p>Giao hàng toàn Hà Nội từ 08h - 20h</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="hr mb-4">
                                    <div class="media">
                                        <img src="~/Themes/MeatyChopShop/Content/images/icon/icon_giao_hang_1.svg" class="mr-3" alt="...">
                                        <div class="media-body">
                                            <p>Miễn phí Giao hàng toàn nội thành Hà Nội</p>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class="media">
                                        <img src="~/Themes/MeatyChopShop/Content/images/icon/icon_giao_hang_1.svg" class="mr-3" alt="...">
                                        <div class="media-body">
                                            <p>Đổi trả 100% sản phẩm lỗi hỏng trong 1 ngày</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col pt-4">
                            <div class="p-5 border rounded bg-gray">
                                <div class="media">
                                    <img src="~/Themes/MeatyChopShop/Content/images/icon/icon_hotline_gray.svg" class="mr-3">
                                    <div class="media-body">
                                        @await Component.InvokeAsync("TopicBlock", new { systemName = "Hotline" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    
</div>
<section class="related-products mb-5 hr pb-4 pt-4">
    <div class="container">
        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
    </div>
</section>