@model NewsItemListModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.NewsArchive").Text);
    //page class
    //Html.AppendPageCssClassParts("html-news-list-page");
}
@section Breadcrumb{

    <div class="banner-news mb-5">
        <div class="container">
            <div class="row align-items-center" style="min-height:400px">
                <div class="col-12">
                    <h1>@T("MenuNews")</h1>
                    <ul class="list-inline">
                        <li class="list-inline-item">
                            <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                        </li>
                        <li class="list-inline-item">
                            <span class="fas fa-angle-double-right"></span>
                        </li>
                        <li class="list-inline-item active">@T("MenuNews")</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

}
<div class="page container news-list-page">
    <div class="page-title">
        <a href="@Url.RouteUrl("NewsRSS", new { languageId = Model.WorkingLanguageId })" class="link-rss" title="@T("News.RSS.Hint")">@T("News.RSS")</a>
        <h1>@T("News")</h1>
    </div>
    <div class="page-body row">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsListPageBeforeItems })
        @foreach (var item in Model.NewsItems)
        {
            <div class="col-3">
                <div class="news-head">
                    <a class="news-title" href="@Url.RouteUrl("NewsItem", new { SeName = item.SeName })">@item.Title</a>
                    <span class="news-date">-@item.CreatedOn.ToString("D")</span>
                </div>
                <div class="news-body">
                    @Html.Raw(item.Short)
                </div>
                <div class="buttons">
                    <a href="@Url.RouteUrl("NewsItem", new { SeName = item.SeName })" class="read-more">@T("News.MoreInfo")</a>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsListPageInsideItem, additionalData = item })
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsListPageAfterItems })
    </div>
    <div class="row">
        <div class="col">
            @{
                var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
            }
            @if (!(await pager.IsEmpty()))
            {
                <div class="pager">
                    @pager
                </div>
            }
        </div>
    </div>
</div>
